// <auto-generated />
using System;
using Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Context.Migrations
{
    [DbContext(typeof(ContextoConversor))]
    partial class ContextoConversorModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entidades.Entities.Historial", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("cantidad")
                        .HasColumnType("float");

                    b.Property<DateTime>("fechaConversion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("idUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("moneda1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("moneda2")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("resultadoConversion")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("idUsuario");

                    b.HasIndex("moneda1");

                    b.HasIndex("moneda2");

                    b.ToTable("historial");
                });

            modelBuilder.Entity("Entidades.Entities.Moneda", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("factor")
                        .HasColumnType("real");

                    b.Property<string>("nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("monedas");
                });

            modelBuilder.Entity("Entidades.Entities.MonedaNombre", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("monedasNombre");
                });

            modelBuilder.Entity("Entidades.Entities.Pais", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("bandera")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("paises");
                });

            modelBuilder.Entity("Entidades.Entities.Usuario", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("fechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("idPais")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("idPais");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("Entidades.Entities.Historial", b =>
                {
                    b.HasOne("Entidades.Entities.Usuario", "usuario")
                        .WithMany()
                        .HasForeignKey("idUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.Entities.Moneda", "monedaOrigen")
                        .WithMany()
                        .HasForeignKey("moneda1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.Entities.Moneda", "monedaDestino")
                        .WithMany()
                        .HasForeignKey("moneda2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("monedaDestino");

                    b.Navigation("monedaOrigen");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Entidades.Entities.Usuario", b =>
                {
                    b.HasOne("Entidades.Entities.Pais", "pais")
                        .WithMany()
                        .HasForeignKey("idPais");

                    b.Navigation("pais");
                });
#pragma warning restore 612, 618
        }
    }
}
